name: DVWA CI/CD

on:
  push:
    branches:
      - master

jobs:
  build-and-push-dev:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Checkout repository - loads the code to the runner
        uses: actions/checkout@v3

      - name: Login to JFrog Docker Registry
        run: echo "${{ secrets.JFROG_PASSWORD }}" | docker login ${{ secrets.DOCKER_REPO_DEV }} --username ${{ secrets.JFROG_USERNAME }} --password-stdin

      - name: Docker image build
        run: docker build -t dvwa:latest .

      - name: Generate image tag
        id: set_tag
        run: echo "tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Tag image for JFrog
        run: |
          echo "TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          docker tag dvwa:latest ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-${{ steps.set_tag.outputs.tag }}

      - name: Push image to JFrog Dev
        run: docker push ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-${{ steps.set_tag.outputs.tag }}

      - name: Install JFrog CLI v1
        run: |
          curl -fL https://releases.jfrog.io/artifactory/jfrog-cli/v1/1.53.2/jfrog-cli-linux-amd64/jfrog -o jfrog
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/jfrog

      - name: Publish build info to JFrog
        run: |
          export BUILD_NAME=dvwa-ci
          export BUILD_NUMBER=${{ github.sha }}
          export TAG=${{ needs.build-and-push-dev.outputs.tag }}
      
          # Configure Artifactory connection
          jfrog rt config --url=${{ secrets.JFROG_URL }} \
                          --user=${{ secrets.JFROG_USERNAME }} \
                          --password=${{ secrets.JFROG_PASSWORD }} \
                          --interactive=false
      
          # Collect env vars
          jfrog rt build-collect-env $BUILD_NAME $BUILD_NUMBER
      
          # Publish build info
          jfrog rt build-publish $BUILD_NAME $BUILD_NUMBER

  test-scan-and-verify:
    needs: build-and-push-dev
    runs-on: ubuntu-latest
    environment:
      name: test
    steps:
      - name: Awaiting manual approval before scan and test
        run: echo "Test stage approved. Ready to run scans and validations."

      - name: Authenticate Docker to JFrog
        run: echo "${{ secrets.JFROG_PASSWORD }}" | docker login ${{ secrets.DOCKER_REPO_DEV }} --username ${{ secrets.JFROG_USERNAME }} --password-stdin

      - name: Pull dev image
        run: docker pull ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-${{ needs.build-and-push-dev.outputs.tag }}

      - name: Run DVWA container
        run: docker run -d -p 8080:80 --name dvwa-test ${{ secrets.DOCKER_REPO_DEV }}/docker-dev/dvwa:dev-${{ needs.build-and-push-dev.outputs.tag }}

      - name: Check DVWA is reachable
        run: |
          for i in {1..10}; do
            STATUS=$(curl -L -o /dev/null -s -w "%{http_code}" http://127.0.0.1:8080)
            if [ "$STATUS" -eq 200 ] || [ "$STATUS" -eq 302 ]; then
              echo "DVWA is reachable. HTTP status: $STATUS"
              exit 0
            fi
            echo "Waiting for DVWA... Attempt $i, HTTP status: $STATUS"
            sleep 5
          done
          echo "DVWA did not become reachable. Dumping logs:"
          docker logs dvwa-test
          exit 1

      - name: Stop DVWA container
        run: docker stop dvwa-test

      - name: Install JFrog CLI v1 and scan build with Xray
        env:
          JFROG_CLI_JFROG_URL: ${{ secrets.JFROG_URL }}
          JFROG_CLI_USER: ${{ secrets.JFROG_USERNAME }}
          JFROG_CLI_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
          JFROG_CLI_OFFER_CONFIG: false
        run: |
          curl -fL https://releases.jfrog.io/artifactory/jfrog-cli/v1/1.53.2/jfrog-cli-linux-amd64/jfrog -o jfrog
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/jfrog

          jfrog xray scan --build=dvwa-ci/${{ needs.build-and-push-dev.outputs.tag }}
